generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  prayerLogs PrayerLog[]
  friends    Friendship[] @relation("UserFriends")
  friendOf   Friendship[] @relation("FriendFriends")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// --- Prayer Tracker Models ---
model Prayer {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  prayerLogs PrayerLog[]
}

enum PrayerStatus {
  ON_TIME
  LATE
  JAMAAH
}

model PrayerLog {
  id       Int          @id @default(autoincrement())
  user     User         @relation(fields: [userId], references: [id])
  userId   String
  prayer   Prayer       @relation(fields: [prayerId], references: [id])
  prayerId Int
  date     DateTime
  status   PrayerStatus

  @@unique([userId, prayerId, date])
}

model Friendship {
  id       Int    @id @default(autoincrement())
  user     User   @relation("UserFriends", fields: [userId], references: [id])
  userId   String
  friend   User   @relation("FriendFriends", fields: [friendId], references: [id])
  friendId String

  @@unique([userId, friendId])
}
